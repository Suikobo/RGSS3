#******************************************************************************
#   ＊ 暗号化アーカイブ内の画像を通常フォルダにコピーするやつ ＊
#                       for RGSS3
#        Ver 1.00   2017.03.16
#   提供者：睡工房
#   This program is a free license.
#******************************************************************************

=begin
    機能
      暗号化アーカイブ内にある画像ファイルを通常フォルダにコピーします。
      クリア特典画像とかで使えるかも？

    使い方
      イベントコマンドのスクリプトで以下のように記述して下さい。
      ※ファイル名は半角の""で囲んでね。
      ※拡張子は不要だよ。（sample.png　→　sample)
      SUI::PNG.export("ファイル名")
      
      例）SUI::PNG.export("tokuten_01")
=end


module SUI
module PNG
  
#==============================================================================
# 設定項目
#==============================================================================
  # 暗号化アーカイブ内でのファイル保存場所
  # 最後の / を忘れないでね。
  FROM = "Graphics/Pictures/"
  
  # 出力したいフォルダ名
  # Game.exe があるフォルダからの相対パスだよ。
  # 最後の / を忘れないでね。
  TO = "特典素材/"
  
#==============================================================================
# 設定完了
#==============================================================================


  #---------------------------------------------------------------------------
  # ■ アーカイブ内の画像を通常フォルダに保存しちゃう
  #---------------------------------------------------------------------------
  def self.export(filename)
    # 元画像
    bitmap = Cache.load_bitmap(FROM, filename)
    
    # 出力画像
    png = to_png(bitmap)
    
    # 保存
    Dir.mkdir(TO) unless FileTest.exist?(TO)
    File.open(TO + filename + '.png', 'wb') do |file|
      file.write(png)
    end
  end
  #---------------------------------------------------------------------------
  # ■ Bitmap to PNG
  #---------------------------------------------------------------------------
  def self.to_png(bitmap)
    # 出力データ
    data = []
    bitmap.height.times do |y|
      data << 0
      bitmap.width.times do |x|
        c = bitmap.get_pixel(x, y)
        data.push(c.red, c.green, c.blue, c.alpha)
      end
    end
    
    # PNG形式で保存
    png  = "\x89PNG\r\n\x1a\n".unpack('C*').pack('C*')
    png += chunk('IHDR', [bitmap.width,bitmap.height,8,6,0,0,0].pack('N2C5'))
    png += chunk('IDAT', Zlib::Deflate.deflate(data.pack('C*')))
    png += chunk('IEND', '')
    return png
  end
  #---------------------------------------------------------------------------
  # ■ PNGチャンク作成
  #---------------------------------------------------------------------------
  def self.chunk(type, data)
    return [data.bytesize, type, data, Zlib.crc32(type + data)].pack('NA4A*N')
  end
end
end
